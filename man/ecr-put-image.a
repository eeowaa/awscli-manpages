.\" Man page generated from reStructuredText.
.
.TH "ECR-PUT-IMAGE" "a" "" ""
.SH NAME
ecr-put-image \- Creates or updates the image manifest and tags associated with an image
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH DESCRIPTION
.sp
Creates or updates the image manifest and tags associated with an image.
.sp
When an image is pushed and all new image layers have been uploaded, the PutImage API is called once to create or update the image manifest and the tags associated with the image.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the \fBdocker\fP CLI to pull, tag, and push images.
.UNINDENT
.UNINDENT
.sp
See also: AWS API Documentation
.sp
See \(aqaws help\(aq for descriptions of global parameters.
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
  put\-image
[\-\-registry\-id <value>]
\-\-repository\-name <value>
\-\-image\-manifest <value>
[\-\-image\-manifest\-media\-type <value>]
[\-\-image\-tag <value>]
[\-\-image\-digest <value>]
[\-\-cli\-input\-json | \-\-cli\-input\-yaml]
[\-\-generate\-cli\-skeleton <value>]
.ft P
.fi
.UNINDENT
.UNINDENT
.SH OPTIONS
.sp
\fB\-\-registry\-id\fP (string)
.INDENT 0.0
.INDENT 3.5
The AWS account ID associated with the registry that contains the repository in which to put the image. If you do not specify a registry, the default registry is assumed.
.UNINDENT
.UNINDENT
.sp
\fB\-\-repository\-name\fP (string)
.INDENT 0.0
.INDENT 3.5
The name of the repository in which to put the image.
.UNINDENT
.UNINDENT
.sp
\fB\-\-image\-manifest\fP (string)
.INDENT 0.0
.INDENT 3.5
The image manifest corresponding to the image to be uploaded.
.UNINDENT
.UNINDENT
.sp
\fB\-\-image\-manifest\-media\-type\fP (string)
.INDENT 0.0
.INDENT 3.5
The media type of the image manifest. If you push an image manifest that does not contain the \fBmediaType\fP field, you must specify the \fBimageManifestMediaType\fP in the request.
.UNINDENT
.UNINDENT
.sp
\fB\-\-image\-tag\fP (string)
.INDENT 0.0
.INDENT 3.5
The tag to associate with the image. This parameter is required for images that use the Docker Image Manifest V2 Schema 2 or Open Container Initiative (OCI) formats.
.UNINDENT
.UNINDENT
.sp
\fB\-\-image\-digest\fP (string)
.INDENT 0.0
.INDENT 3.5
The image digest of the image manifest corresponding to the image.
.UNINDENT
.UNINDENT
.sp
\fB\-\-cli\-input\-json\fP | \fB\-\-cli\-input\-yaml\fP (string)
Reads arguments from the JSON string provided. The JSON string follows the format provided by \fB\-\-generate\-cli\-skeleton\fP\&. If other arguments are provided on the command line, those values will override the JSON\-provided values. It is not possible to pass arbitrary binary values using a JSON\-provided value as the string will be taken literally. This may not be specified along with \fB\-\-cli\-input\-yaml\fP\&.
.sp
\fB\-\-generate\-cli\-skeleton\fP (string)
Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value \fBinput\fP, prints a sample input JSON that can be used as an argument for \fB\-\-cli\-input\-json\fP\&. Similarly, if provided \fByaml\-input\fP it will print a sample input YAML that can be used with \fB\-\-cli\-input\-yaml\fP\&. If provided with the value \fBoutput\fP, it validates the command inputs and returns a sample output JSON for that command.
.sp
See \(aqaws help\(aq for descriptions of global parameters.
.SH EXAMPLES
.sp
\fBTo retag an image with its manifest\fP
.sp
The following \fBput\-image\fP example creates a new tag in the \fBhello\-world\fP repository with an existing image manifest.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
aws ecr put\-image \e
    \-\-repository\-name hello\-world \e
    \-\-image\-tag 2019.08 \e
    \-\-image\-manifest file://hello\-world.manifest.json
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Contents of \fBhello\-world.manifest.json\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "schemaVersion": 2,
    "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
    "config": {
        "mediaType": "application/vnd.docker.container.image.v1+json",
        "size": 5695,
        "digest": "sha256:cea5fe7701b7db3dd1c372f3cea6f43cdda444fcc488f530829145e426d8b980"
    },
    "layers": [
        {
            "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
            "size": 39096921,
            "digest": "sha256:d8868e50ac4c7104d2200d42f432b661b2da8c1e417ccfae217e6a1e04bb9295"
        },
        {
            "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
            "size": 57938,
            "digest": "sha256:83251ac64627fc331584f6c498b3aba5badc01574e2c70b2499af3af16630eed"
        },
        {
            "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
            "size": 423,
            "digest": "sha256:589bba2f1b36ae56f0152c246e2541c5aa604b058febfcf2be32e9a304fec610"
        },
        {
            "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
            "size": 680,
            "digest": "sha256:d62ecaceda3964b735cdd2af613d6bb136a52c1da0838b2ff4b4dab4212bcb1c"
        },
        {
            "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
            "size": 162,
            "digest": "sha256:6d93b41cfc6bf0d2522b7cf61588de4cd045065b36c52bd3aec2ba0622b2b22b"
        },
        {
            "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
            "size": 28268840,
            "digest": "sha256:6986b4d4c07932c680b3587f2eac8b0e013568c003cc23b04044628a5c5e599f"
        },
        {
            "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
            "size": 35369152,
            "digest": "sha256:8c5ec60f10102dc8da0649d866c7c2f706e459d0bdc25c83ad2de86f4996c276"
        },
        {
            "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
            "size": 155,
            "digest": "sha256:cde50b1c594539c5f67cbede9aef95c9ae321ccfb857f7b251b45b84198adc85"
        },
        {
            "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
            "size": 28737,
            "digest": "sha256:2e102807ab72a73fc9abf53e8c50e421bdc337a0a8afcb242176edeec65977e4"
        },
        {
            "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
            "size": 190,
            "digest": "sha256:fc379bbd5ed37808772bef016553a297356c59b8f134659e6ee4ecb563c2f5a7"
        },
        {
            "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
            "size": 28748,
            "digest": "sha256:021db240dfccf5a1aff19507d17c0177e5888e518acf295b52204b1825e8b7ee"
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Output:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "image": {
        "registryId": "130757420319",
        "repositoryName": "hello\-world",
        "imageId": {
            "imageDigest": "sha256:8ece96b74f87652876199d83bd107d0435a196133af383ac54cb82b6cc5283ae",
            "imageTag": "2019.08"
        },
        "imageManifest": "{\en  \e"schemaVersion\e": 2,\en  \e"mediaType\e": \e"application/vnd.docker.distribution.manifest.v2+json\e",\en  \e"config\e": {\en    \e"mediaType\e": \e"application/vnd.docker.container.image.v1+json\e",\en    \e"size\e": 5695,\en    \e"digest\e": \e"sha256:cea5fe7701b7db3dd1c372f3cea6f43cdda444fcc488f530829145e426d8b980\e"\en  },\en  \e"layers\e": [\en    {\en      \e"mediaType\e": \e"application/vnd.docker.image.rootfs.diff.tar.gzip\e",\en      \e"size\e": 39096921,\en      \e"digest\e": \e"sha256:d8868e50ac4c7104d2200d42f432b661b2da8c1e417ccfae217e6a1e04bb9295\e"\en    },\en    {\en      \e"mediaType\e": \e"application/vnd.docker.image.rootfs.diff.tar.gzip\e",\en      \e"size\e": 57938,\en      \e"digest\e": \e"sha256:83251ac64627fc331584f6c498b3aba5badc01574e2c70b2499af3af16630eed\e"\en    },\en    {\en      \e"mediaType\e": \e"application/vnd.docker.image.rootfs.diff.tar.gzip\e",\en      \e"size\e": 423,\en      \e"digest\e": \e"sha256:589bba2f1b36ae56f0152c246e2541c5aa604b058febfcf2be32e9a304fec610\e"\en    },\en    {\en      \e"mediaType\e": \e"application/vnd.docker.image.rootfs.diff.tar.gzip\e",\en      \e"size\e": 680,\en      \e"digest\e": \e"sha256:d62ecaceda3964b735cdd2af613d6bb136a52c1da0838b2ff4b4dab4212bcb1c\e"\en    },\en    {\en      \e"mediaType\e": \e"application/vnd.docker.image.rootfs.diff.tar.gzip\e",\en      \e"size\e": 162,\en      \e"digest\e": \e"sha256:6d93b41cfc6bf0d2522b7cf61588de4cd045065b36c52bd3aec2ba0622b2b22b\e"\en    },\en    {\en      \e"mediaType\e": \e"application/vnd.docker.image.rootfs.diff.tar.gzip\e",\en      \e"size\e": 28268840,\en      \e"digest\e": \e"sha256:6986b4d4c07932c680b3587f2eac8b0e013568c003cc23b04044628a5c5e599f\e"\en    },\en    {\en      \e"mediaType\e": \e"application/vnd.docker.image.rootfs.diff.tar.gzip\e",\en      \e"size\e": 35369152,\en      \e"digest\e": \e"sha256:8c5ec60f10102dc8da0649d866c7c2f706e459d0bdc25c83ad2de86f4996c276\e"\en    },\en    {\en      \e"mediaType\e": \e"application/vnd.docker.image.rootfs.diff.tar.gzip\e",\en      \e"size\e": 155,\en      \e"digest\e": \e"sha256:cde50b1c594539c5f67cbede9aef95c9ae321ccfb857f7b251b45b84198adc85\e"\en    },\en    {\en      \e"mediaType\e": \e"application/vnd.docker.image.rootfs.diff.tar.gzip\e",\en      \e"size\e": 28737,\en      \e"digest\e": \e"sha256:2e102807ab72a73fc9abf53e8c50e421bdc337a0a8afcb242176edeec65977e4\e"\en    },\en    {\en      \e"mediaType\e": \e"application/vnd.docker.image.rootfs.diff.tar.gzip\e",\en      \e"size\e": 190,\en      \e"digest\e": \e"sha256:fc379bbd5ed37808772bef016553a297356c59b8f134659e6ee4ecb563c2f5a7\e"\en    },\en    {\en      \e"mediaType\e": \e"application/vnd.docker.image.rootfs.diff.tar.gzip\e",\en      \e"size\e": 28748,\en      \e"digest\e": \e"sha256:021db240dfccf5a1aff19507d17c0177e5888e518acf295b52204b1825e8b7ee\e"\en    }\en  ]\en}\en"
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SH OUTPUT
.sp
image \-> (structure)
.INDENT 0.0
.INDENT 3.5
Details of the image uploaded.
.sp
registryId \-> (string)
.INDENT 0.0
.INDENT 3.5
The AWS account ID associated with the registry containing the image.
.UNINDENT
.UNINDENT
.sp
repositoryName \-> (string)
.INDENT 0.0
.INDENT 3.5
The name of the repository associated with the image.
.UNINDENT
.UNINDENT
.sp
imageId \-> (structure)
.INDENT 0.0
.INDENT 3.5
An object containing the image tag and image digest associated with an image.
.sp
imageDigest \-> (string)
.INDENT 0.0
.INDENT 3.5
The \fBsha256\fP digest of the image manifest.
.UNINDENT
.UNINDENT
.sp
imageTag \-> (string)
.INDENT 0.0
.INDENT 3.5
The tag used for the image.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
imageManifest \-> (string)
.INDENT 0.0
.INDENT 3.5
The image manifest associated with the image.
.UNINDENT
.UNINDENT
.sp
imageManifestMediaType \-> (string)
.INDENT 0.0
.INDENT 3.5
The manifest media type of the image.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.\" Generated by docutils manpage writer.
.

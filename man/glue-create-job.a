.\" Man page generated from reStructuredText.
.
.TH "GLUE-CREATE-JOB" "a" "" ""
.SH NAME
glue-create-job \- Creates a new job definition
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH DESCRIPTION
.sp
Creates a new job definition.
.sp
See also: AWS API Documentation
.sp
See \(aqaws help\(aq for descriptions of global parameters.
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
  create\-job
\-\-name <value>
[\-\-description <value>]
[\-\-log\-uri <value>]
\-\-role <value>
[\-\-execution\-property <value>]
\-\-command <value>
[\-\-default\-arguments <value>]
[\-\-non\-overridable\-arguments <value>]
[\-\-connections <value>]
[\-\-max\-retries <value>]
[\-\-allocated\-capacity <value>]
[\-\-timeout <value>]
[\-\-max\-capacity <value>]
[\-\-security\-configuration <value>]
[\-\-tags <value>]
[\-\-notification\-property <value>]
[\-\-glue\-version <value>]
[\-\-number\-of\-workers <value>]
[\-\-worker\-type <value>]
[\-\-cli\-input\-json | \-\-cli\-input\-yaml]
[\-\-generate\-cli\-skeleton <value>]
.ft P
.fi
.UNINDENT
.UNINDENT
.SH OPTIONS
.sp
\fB\-\-name\fP (string)
.INDENT 0.0
.INDENT 3.5
The name you assign to this job definition. It must be unique in your account.
.UNINDENT
.UNINDENT
.sp
\fB\-\-description\fP (string)
.INDENT 0.0
.INDENT 3.5
Description of the job being defined.
.UNINDENT
.UNINDENT
.sp
\fB\-\-log\-uri\fP (string)
.INDENT 0.0
.INDENT 3.5
This field is reserved for future use.
.UNINDENT
.UNINDENT
.sp
\fB\-\-role\fP (string)
.INDENT 0.0
.INDENT 3.5
The name or Amazon Resource Name (ARN) of the IAM role associated with this job.
.UNINDENT
.UNINDENT
.sp
\fB\-\-execution\-property\fP (structure)
.INDENT 0.0
.INDENT 3.5
An \fBExecutionProperty\fP specifying the maximum number of concurrent runs allowed for this job.
.sp
MaxConcurrentRuns \-> (integer)
.INDENT 0.0
.INDENT 3.5
The maximum number of concurrent runs allowed for the job. The default is 1. An error is returned when this threshold is reached. The maximum value you can specify is controlled by a service limit.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Shorthand Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MaxConcurrentRuns=integer
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "MaxConcurrentRuns": integer
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-command\fP (structure)
.INDENT 0.0
.INDENT 3.5
The \fBJobCommand\fP that executes this job.
.sp
Name \-> (string)
.INDENT 0.0
.INDENT 3.5
The name of the job command. For an Apache Spark ETL job, this must be \fBglueetl\fP . For a Python shell job, it must be \fBpythonshell\fP . For an Apache Spark streaming ETL job, this must be \fBgluestreaming\fP .
.UNINDENT
.UNINDENT
.sp
ScriptLocation \-> (string)
.INDENT 0.0
.INDENT 3.5
Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes a job.
.UNINDENT
.UNINDENT
.sp
PythonVersion \-> (string)
.INDENT 0.0
.INDENT 3.5
The Python version being used to execute a Python shell job. Allowed values are 2 or 3.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Shorthand Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Name=string,ScriptLocation=string,PythonVersion=string
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "Name": "string",
  "ScriptLocation": "string",
  "PythonVersion": "string"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-default\-arguments\fP (map)
.INDENT 0.0
.INDENT 3.5
The default arguments for this job.
.sp
You can specify arguments here that your own job\-execution script consumes, as well as arguments that AWS Glue itself consumes.
.sp
For information about how to specify and consume your own Job arguments, see the \fI\%Calling AWS Glue APIs in Python\fP topic in the developer guide.
.sp
For information about the key\-value pairs that AWS Glue consumes to set up your job, see the \fI\%Special Parameters Used by AWS Glue\fP topic in the developer guide.
.sp
key \-> (string)
.sp
value \-> (string)
.UNINDENT
.UNINDENT
.sp
Shorthand Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
KeyName1=string,KeyName2=string
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"string": "string"
  ...}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-non\-overridable\-arguments\fP (map)
.INDENT 0.0
.INDENT 3.5
Non\-overridable arguments for this job, specified as name\-value pairs.
.sp
key \-> (string)
.sp
value \-> (string)
.UNINDENT
.UNINDENT
.sp
Shorthand Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
KeyName1=string,KeyName2=string
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"string": "string"
  ...}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-connections\fP (structure)
.INDENT 0.0
.INDENT 3.5
The connections used for this job.
.sp
Connections \-> (list)
.INDENT 0.0
.INDENT 3.5
A list of connections used by the job.
.sp
(string)
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Shorthand Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Connections=string,string
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "Connections": ["string", ...]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-max\-retries\fP (integer)
.INDENT 0.0
.INDENT 3.5
The maximum number of times to retry this job if it fails.
.UNINDENT
.UNINDENT
.sp
\fB\-\-allocated\-capacity\fP (integer)
.INDENT 0.0
.INDENT 3.5
This parameter is deprecated. Use \fBMaxCapacity\fP instead.
.sp
The number of AWS Glue data processing units (DPUs) to allocate to this Job. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the \fI\%AWS Glue pricing page\fP .
.UNINDENT
.UNINDENT
.sp
\fB\-\-timeout\fP (integer)
.INDENT 0.0
.INDENT 3.5
The job timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters \fBTIMEOUT\fP status. The default is 2,880 minutes (48 hours).
.UNINDENT
.UNINDENT
.sp
\fB\-\-max\-capacity\fP (double)
.INDENT 0.0
.INDENT 3.5
The number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the \fI\%AWS Glue pricing page\fP .
.sp
Do not set \fBMax Capacity\fP if using \fBWorkerType\fP and \fBNumberOfWorkers\fP .
.sp
The value that can be allocated for \fBMaxCapacity\fP depends on whether you are running a Python shell job or an Apache Spark ETL job:
.INDENT 0.0
.IP \(bu 2
When you specify a Python shell job (\fBJobCommand.Name\fP ="pythonshell"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.
.IP \(bu 2
When you specify an Apache Spark ETL job (\fBJobCommand.Name\fP ="glueetl") or Apache Spark streaming ETL job (\fBJobCommand.Name\fP ="gluestreaming"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fB\-\-security\-configuration\fP (string)
.INDENT 0.0
.INDENT 3.5
The name of the \fBSecurityConfiguration\fP structure to be used with this job.
.UNINDENT
.UNINDENT
.sp
\fB\-\-tags\fP (map)
.INDENT 0.0
.INDENT 3.5
The tags to use with this job. You may use tags to limit access to the job. For more information about tags in AWS Glue, see \fI\%AWS Tags in AWS Glue\fP in the developer guide.
.sp
key \-> (string)
.sp
value \-> (string)
.UNINDENT
.UNINDENT
.sp
Shorthand Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
KeyName1=string,KeyName2=string
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"string": "string"
  ...}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-notification\-property\fP (structure)
.INDENT 0.0
.INDENT 3.5
Specifies configuration properties of a job notification.
.sp
NotifyDelayAfter \-> (integer)
.INDENT 0.0
.INDENT 3.5
After a job run starts, the number of minutes to wait before sending a job run delay notification.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Shorthand Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
NotifyDelayAfter=integer
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "NotifyDelayAfter": integer
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-glue\-version\fP (string)
.INDENT 0.0
.INDENT 3.5
Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The Python version indicates the version supported for jobs of type Spark.
.sp
For more information about the available AWS Glue versions and corresponding Spark and Python versions, see \fI\%Glue version\fP in the developer guide.
.sp
Jobs that are created without specifying a Glue version default to Glue 0.9.
.UNINDENT
.UNINDENT
.sp
\fB\-\-number\-of\-workers\fP (integer)
.INDENT 0.0
.INDENT 3.5
The number of workers of a defined \fBworkerType\fP that are allocated when a job runs.
.sp
The maximum number of workers you can define are 299 for \fBG.1X\fP , and 149 for \fBG.2X\fP .
.UNINDENT
.UNINDENT
.sp
\fB\-\-worker\-type\fP (string)
.INDENT 0.0
.INDENT 3.5
The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, or G.2X.
.INDENT 0.0
.IP \(bu 2
For the \fBStandard\fP worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
.IP \(bu 2
For the \fBG.1X\fP worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory\-intensive jobs.
.IP \(bu 2
For the \fBG.2X\fP worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory\-intensive jobs.
.UNINDENT
.sp
Possible values:
.INDENT 0.0
.IP \(bu 2
\fBStandard\fP
.IP \(bu 2
\fBG.1X\fP
.IP \(bu 2
\fBG.2X\fP
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fB\-\-cli\-input\-json\fP | \fB\-\-cli\-input\-yaml\fP (string)
Reads arguments from the JSON string provided. The JSON string follows the format provided by \fB\-\-generate\-cli\-skeleton\fP\&. If other arguments are provided on the command line, those values will override the JSON\-provided values. It is not possible to pass arbitrary binary values using a JSON\-provided value as the string will be taken literally. This may not be specified along with \fB\-\-cli\-input\-yaml\fP\&.
.sp
\fB\-\-generate\-cli\-skeleton\fP (string)
Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value \fBinput\fP, prints a sample input JSON that can be used as an argument for \fB\-\-cli\-input\-json\fP\&. Similarly, if provided \fByaml\-input\fP it will print a sample input YAML that can be used with \fB\-\-cli\-input\-yaml\fP\&. If provided with the value \fBoutput\fP, it validates the command inputs and returns a sample output JSON for that command.
.sp
See \(aqaws help\(aq for descriptions of global parameters.
.SH EXAMPLES
.sp
\fBTo create a job to transform data\fP
.sp
The following \fBcreate\-job\fP example creates a streaming job that runs a script stored in S3.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
aws glue create\-job \e
    \-\-name my\-testing\-job \e
    \-\-role AWSGlueServiceRoleDefault \e
    \-\-command \(aq{ \e
        "Name": "gluestreaming", \e
        "ScriptLocation": "s3://DOC\-EXAMPLE\-BUCKET/folder/" \e
    }\(aq \e
    \-\-region us\-east\-1 \e
    \-\-output json \e
    \-\-default\-arguments \(aq{ \e
        "\-\-job\-language":"scala", \e
        "\-\-class":"GlueApp" \e
    }\(aq \e
    \-\-profile my\-profile \e
    \-\-endpoint https://glue.us\-east\-1.amazonaws.com
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Contents of \fBtest_script.scala\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import com.amazonaws.services.glue.ChoiceOption
import com.amazonaws.services.glue.GlueContext
import com.amazonaws.services.glue.MappingSpec
import com.amazonaws.services.glue.ResolveSpec
import com.amazonaws.services.glue.errors.CallSite
import com.amazonaws.services.glue.util.GlueArgParser
import com.amazonaws.services.glue.util.Job
import com.amazonaws.services.glue.util.JsonOptions
import org.apache.spark.SparkContext
import scala.collection.JavaConverters._

object GlueApp {
    def main(sysArgs: Array[String]) {
        val spark: SparkContext = new SparkContext()
        val glueContext: GlueContext = new GlueContext(spark)
        // @params: [JOB_NAME]
        val args = GlueArgParser.getResolvedOptions(sysArgs, Seq("JOB_NAME").toArray)
        Job.init(args("JOB_NAME"), glueContext, args.asJava)
        // @type: DataSource
        // @args: [database = "tempdb", table_name = "s3\-source", transformation_ctx = "datasource0"]
        // @return: datasource0
        // @inputs: []
        val datasource0 = glueContext.getCatalogSource(database = "tempdb", tableName = "s3\-source", redshiftTmpDir = "", transformationContext = "datasource0").getDynamicFrame()
        // @type: ApplyMapping
        // @args: [mapping = [("sensorid", "int", "sensorid", "int"), ("currenttemperature", "int", "currenttemperature", "int"), ("status", "string", "status", "string")], transformation_ctx = "applymapping1"]
        // @return: applymapping1
        // @inputs: [frame = datasource0]
        val applymapping1 = datasource0.applyMapping(mappings = Seq(("sensorid", "int", "sensorid", "int"), ("currenttemperature", "int", "currenttemperature", "int"), ("status", "string", "status", "string")), caseSensitive = false, transformationContext = "applymapping1")
        // @type: SelectFields
        // @args: [paths = ["sensorid", "currenttemperature", "status"], transformation_ctx = "selectfields2"]
        // @return: selectfields2
        // @inputs: [frame = applymapping1]
        val selectfields2 = applymapping1.selectFields(paths = Seq("sensorid", "currenttemperature", "status"), transformationContext = "selectfields2")
        // @type: ResolveChoice
        // @args: [choice = "MATCH_CATALOG", database = "tempdb", table_name = "my\-s3\-sink", transformation_ctx = "resolvechoice3"]
        // @return: resolvechoice3
        // @inputs: [frame = selectfields2]
        val resolvechoice3 = selectfields2.resolveChoice(choiceOption = Some(ChoiceOption("MATCH_CATALOG")), database = Some("tempdb"), tableName = Some("my\-s3\-sink"), transformationContext = "resolvechoice3")
        // @type: DataSink
        // @args: [database = "tempdb", table_name = "my\-s3\-sink", transformation_ctx = "datasink4"]
        // @return: datasink4
        // @inputs: [frame = resolvechoice3]
        val datasink4 = glueContext.getCatalogSink(database = "tempdb", tableName = "my\-s3\-sink", redshiftTmpDir = "", transformationContext = "datasink4").writeDynamicFrame(resolvechoice3)
        Job.commit()
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Output:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "Name": "my\-testing\-job"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For more information, see \fI\%Authoring Jobs in AWS Glue\fP in the \fIAWS Glue Developer Guide\fP\&.
.SH OUTPUT
.sp
Name \-> (string)
.INDENT 0.0
.INDENT 3.5
The unique name that was provided for this job definition.
.UNINDENT
.UNINDENT
.\" Generated by docutils manpage writer.
.

.\" Man page generated from reStructuredText.
.
.TH "GLUE-GET-PLAN" "a" "" ""
.SH NAME
glue-get-plan \- Gets code to perform a specified mapping
.SH DESCRIPTION
.sp
Gets code to perform a specified mapping.
.sp
See also: AWS API Documentation
.sp
See \(aqaws help\(aq for descriptions of global parameters.
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
  get\-plan
\-\-mapping <value>
\-\-source <value>
[\-\-sinks <value>]
[\-\-location <value>]
[\-\-language <value>]
[\-\-additional\-plan\-options\-map <value>]
[\-\-cli\-input\-json | \-\-cli\-input\-yaml]
[\-\-generate\-cli\-skeleton <value>]
.ft P
.fi
.UNINDENT
.UNINDENT
.SH OPTIONS
.sp
\fB\-\-mapping\fP (list)
.INDENT 0.0
.INDENT 3.5
The list of mappings from a source table to target tables.
.sp
(structure)
.INDENT 0.0
.INDENT 3.5
Defines a mapping.
.sp
SourceTable \-> (string)
.INDENT 0.0
.INDENT 3.5
The name of the source table.
.UNINDENT
.UNINDENT
.sp
SourcePath \-> (string)
.INDENT 0.0
.INDENT 3.5
The source path.
.UNINDENT
.UNINDENT
.sp
SourceType \-> (string)
.INDENT 0.0
.INDENT 3.5
The source type.
.UNINDENT
.UNINDENT
.sp
TargetTable \-> (string)
.INDENT 0.0
.INDENT 3.5
The target table.
.UNINDENT
.UNINDENT
.sp
TargetPath \-> (string)
.INDENT 0.0
.INDENT 3.5
The target path.
.UNINDENT
.UNINDENT
.sp
TargetType \-> (string)
.INDENT 0.0
.INDENT 3.5
The target type.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Shorthand Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
SourceTable=string,SourcePath=string,SourceType=string,TargetTable=string,TargetPath=string,TargetType=string ...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
  {
    "SourceTable": "string",
    "SourcePath": "string",
    "SourceType": "string",
    "TargetTable": "string",
    "TargetPath": "string",
    "TargetType": "string"
  }
  ...
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-source\fP (structure)
.INDENT 0.0
.INDENT 3.5
The source table.
.sp
DatabaseName \-> (string)
.INDENT 0.0
.INDENT 3.5
The database in which the table metadata resides.
.UNINDENT
.UNINDENT
.sp
TableName \-> (string)
.INDENT 0.0
.INDENT 3.5
The name of the table in question.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Shorthand Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
DatabaseName=string,TableName=string
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "DatabaseName": "string",
  "TableName": "string"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-sinks\fP (list)
.INDENT 0.0
.INDENT 3.5
The target tables.
.sp
(structure)
.INDENT 0.0
.INDENT 3.5
Specifies a table definition in the AWS Glue Data Catalog.
.sp
DatabaseName \-> (string)
.INDENT 0.0
.INDENT 3.5
The database in which the table metadata resides.
.UNINDENT
.UNINDENT
.sp
TableName \-> (string)
.INDENT 0.0
.INDENT 3.5
The name of the table in question.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Shorthand Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
DatabaseName=string,TableName=string ...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
  {
    "DatabaseName": "string",
    "TableName": "string"
  }
  ...
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-location\fP (structure)
.INDENT 0.0
.INDENT 3.5
The parameters for the mapping.
.sp
Jdbc \-> (list)
.INDENT 0.0
.INDENT 3.5
A JDBC location.
.sp
(structure)
.INDENT 0.0
.INDENT 3.5
An argument or property of a node.
.sp
Name \-> (string)
.INDENT 0.0
.INDENT 3.5
The name of the argument or property.
.UNINDENT
.UNINDENT
.sp
Value \-> (string)
.INDENT 0.0
.INDENT 3.5
The value of the argument or property.
.UNINDENT
.UNINDENT
.sp
Param \-> (boolean)
.INDENT 0.0
.INDENT 3.5
True if the value is used as a parameter.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
S3 \-> (list)
.INDENT 0.0
.INDENT 3.5
An Amazon Simple Storage Service (Amazon S3) location.
.sp
(structure)
.INDENT 0.0
.INDENT 3.5
An argument or property of a node.
.sp
Name \-> (string)
.INDENT 0.0
.INDENT 3.5
The name of the argument or property.
.UNINDENT
.UNINDENT
.sp
Value \-> (string)
.INDENT 0.0
.INDENT 3.5
The value of the argument or property.
.UNINDENT
.UNINDENT
.sp
Param \-> (boolean)
.INDENT 0.0
.INDENT 3.5
True if the value is used as a parameter.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
DynamoDB \-> (list)
.INDENT 0.0
.INDENT 3.5
An Amazon DynamoDB table location.
.sp
(structure)
.INDENT 0.0
.INDENT 3.5
An argument or property of a node.
.sp
Name \-> (string)
.INDENT 0.0
.INDENT 3.5
The name of the argument or property.
.UNINDENT
.UNINDENT
.sp
Value \-> (string)
.INDENT 0.0
.INDENT 3.5
The value of the argument or property.
.UNINDENT
.UNINDENT
.sp
Param \-> (boolean)
.INDENT 0.0
.INDENT 3.5
True if the value is used as a parameter.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Shorthand Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Jdbc=[{Name=string,Value=string,Param=boolean},{Name=string,Value=string,Param=boolean}],S3=[{Name=string,Value=string,Param=boolean},{Name=string,Value=string,Param=boolean}],DynamoDB=[{Name=string,Value=string,Param=boolean},{Name=string,Value=string,Param=boolean}]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "Jdbc": [
    {
      "Name": "string",
      "Value": "string",
      "Param": true|false
    }
    ...
  ],
  "S3": [
    {
      "Name": "string",
      "Value": "string",
      "Param": true|false
    }
    ...
  ],
  "DynamoDB": [
    {
      "Name": "string",
      "Value": "string",
      "Param": true|false
    }
    ...
  ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-language\fP (string)
.INDENT 0.0
.INDENT 3.5
The programming language of the code to perform the mapping.
.sp
Possible values:
.INDENT 0.0
.IP \(bu 2
\fBPYTHON\fP
.IP \(bu 2
\fBSCALA\fP
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fB\-\-additional\-plan\-options\-map\fP (map)
.INDENT 0.0
.INDENT 3.5
A map to hold additional optional key\-value parameters.
.sp
Currently, these key\-value pairs are supported:
.INDENT 0.0
.IP \(bu 2
\fBinferSchema\fP â€” Specifies whether to set \fBinferSchema\fP to true or false for the default script generated by an AWS Glue job. For example, to set \fBinferSchema\fP to true, pass the following key value pair:  \fB\-\-additional\-plan\-options\-map \(aq{"inferSchema":"true"}\(aq\fP
.UNINDENT
.sp
key \-> (string)
.sp
value \-> (string)
.UNINDENT
.UNINDENT
.sp
Shorthand Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
KeyName1=string,KeyName2=string
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"string": "string"
  ...}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-cli\-input\-json\fP | \fB\-\-cli\-input\-yaml\fP (string)
Reads arguments from the JSON string provided. The JSON string follows the format provided by \fB\-\-generate\-cli\-skeleton\fP\&. If other arguments are provided on the command line, those values will override the JSON\-provided values. It is not possible to pass arbitrary binary values using a JSON\-provided value as the string will be taken literally. This may not be specified along with \fB\-\-cli\-input\-yaml\fP\&.
.sp
\fB\-\-generate\-cli\-skeleton\fP (string)
Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value \fBinput\fP, prints a sample input JSON that can be used as an argument for \fB\-\-cli\-input\-json\fP\&. Similarly, if provided \fByaml\-input\fP it will print a sample input YAML that can be used with \fB\-\-cli\-input\-yaml\fP\&. If provided with the value \fBoutput\fP, it validates the command inputs and returns a sample output JSON for that command.
.sp
See \(aqaws help\(aq for descriptions of global parameters.
.SH EXAMPLES
.sp
\fBTo get the generated code for mapping data from source tables to target tables\fP
.sp
The following \fBget\-plan\fP retrieves the generated code for mapping columns from the data source to the data target.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
aws glue get\-plan \-\-mapping \(aq[ \e
    { \e
        "SourcePath":"sensorid", \e
        "SourceTable":"anything", \e
        "SourceType":"int", \e
        "TargetPath":"sensorid", \e
        "TargetTable":"anything", \e
        "TargetType":"int" \e
    }, \e
    { \e
        "SourcePath":"currenttemperature", \e
        "SourceTable":"anything", \e
        "SourceType":"int", \e
        "TargetPath":"currenttemperature", \e
        "TargetTable":"anything", \e
        "TargetType":"int" \e
    }, \e
    { \e
        "SourcePath":"status", \e
        "SourceTable":"anything", \e
        "SourceType":"string", \e
        "TargetPath":"status", \e
        "TargetTable":"anything", \e
        "TargetType":"string" \e
    }]\(aq \e
    \-\-source \(aq{ \e
        "DatabaseName":"tempdb", \e
        "TableName":"s3\-source" \e
    }\(aq \e
    \-\-sinks \(aq[ \e
        { \e
            "DatabaseName":"tempdb", \e
            "TableName":"my\-s3\-sink" \e
        }]\(aq
    \-\-language "scala"
    \-\-endpoint https://glue.us\-east\-1.amazonaws.com
    \-\-output "text"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Output:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import com.amazonaws.services.glue.ChoiceOption
import com.amazonaws.services.glue.GlueContext
import com.amazonaws.services.glue.MappingSpec
import com.amazonaws.services.glue.ResolveSpec
import com.amazonaws.services.glue.errors.CallSite
import com.amazonaws.services.glue.util.GlueArgParser
import com.amazonaws.services.glue.util.Job
import com.amazonaws.services.glue.util.JsonOptions
import org.apache.spark.SparkContext
import scala.collection.JavaConverters._

object GlueApp {
  def main(sysArgs: Array[String]) {
    val spark: SparkContext = new SparkContext()
    val glueContext: GlueContext = new GlueContext(spark)
    // @params: [JOB_NAME]
    val args = GlueArgParser.getResolvedOptions(sysArgs, Seq("JOB_NAME").toArray)
    Job.init(args("JOB_NAME"), glueContext, args.asJava)
    // @type: DataSource
    // @args: [database = "tempdb", table_name = "s3\-source", transformation_ctx = "datasource0"]
    // @return: datasource0
    // @inputs: []
    val datasource0 = glueContext.getCatalogSource(database = "tempdb", tableName = "s3\-source", redshiftTmpDir = "", transformationContext = "datasource0").getDynamicFrame()
    // @type: ApplyMapping
    // @args: [mapping = [("sensorid", "int", "sensorid", "int"), ("currenttemperature", "int", "currenttemperature", "int"), ("status", "string", "status", "string")], transformation_ctx = "applymapping1"]
    // @return: applymapping1
    // @inputs: [frame = datasource0]
    val applymapping1 = datasource0.applyMapping(mappings = Seq(("sensorid", "int", "sensorid", "int"), ("currenttemperature", "int", "currenttemperature", "int"), ("status", "string", "status", "string")), caseSensitive = false, transformationContext = "applymapping1")
    // @type: SelectFields
    // @args: [paths = ["sensorid", "currenttemperature", "status"], transformation_ctx = "selectfields2"]
    // @return: selectfields2
    // @inputs: [frame = applymapping1]
    val selectfields2 = applymapping1.selectFields(paths = Seq("sensorid", "currenttemperature", "status"), transformationContext = "selectfields2")
    // @type: ResolveChoice
    // @args: [choice = "MATCH_CATALOG", database = "tempdb", table_name = "my\-s3\-sink", transformation_ctx = "resolvechoice3"]
    // @return: resolvechoice3
    // @inputs: [frame = selectfields2]
    val resolvechoice3 = selectfields2.resolveChoice(choiceOption = Some(ChoiceOption("MATCH_CATALOG")), database = Some("tempdb"), tableName = Some("my\-s3\-sink"), transformationContext = "resolvechoice3")
    // @type: DataSink
    // @args: [database = "tempdb", table_name = "my\-s3\-sink", transformation_ctx = "datasink4"]
    // @return: datasink4
    // @inputs: [frame = resolvechoice3]
    val datasink4 = glueContext.getCatalogSink(database = "tempdb", tableName = "my\-s3\-sink", redshiftTmpDir = "", transformationContext = "datasink4").writeDynamicFrame(resolvechoice3)
    Job.commit()
  }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For more information, see \fI\%Editing Scripts in AWS Glue\fP in the \fIAWS Glue Developer Guide\fP\&.
.SH OUTPUT
.sp
PythonScript \-> (string)
.INDENT 0.0
.INDENT 3.5
A Python script to perform the mapping.
.UNINDENT
.UNINDENT
.sp
ScalaCode \-> (string)
.INDENT 0.0
.INDENT 3.5
The Scala code to perform the mapping.
.UNINDENT
.UNINDENT
.\" Generated by docutils manpage writer.
.

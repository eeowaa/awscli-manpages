.\" Man page generated from reStructuredText.
.
.TH "SAGEMAKER-CREATE-COMPILATION-JOB" "a" "" ""
.SH NAME
sagemaker-create-compilation-job \- Starts a model compilation job
.SH DESCRIPTION
.sp
Starts a model compilation job. After the model has been compiled, Amazon SageMaker saves the resulting model artifacts to an Amazon Simple Storage Service (Amazon S3) bucket that you specify.
.sp
If you choose to host your model using Amazon SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts with AWS IoT Greengrass. In that case, deploy them as an ML resource.
.sp
In the request body, you provide the following:
.INDENT 0.0
.IP \(bu 2
A name for the compilation job
.IP \(bu 2
Information about the input model artifacts
.IP \(bu 2
The output location for the compiled model and the device (target) that the model runs on
.IP \(bu 2
The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker assumes to perform the model compilation job.
.UNINDENT
.sp
You can also provide a \fBTag\fP to track the model compilation job\(aqs resource use and costs. The response body contains the \fBCompilationJobArn\fP for the compiled job.
.sp
To stop a model compilation job, use  StopCompilationJob . To get information about a particular model compilation job, use  DescribeCompilationJob . To get information about multiple model compilation jobs, use  ListCompilationJobs .
.sp
See also: AWS API Documentation
.sp
See \(aqaws help\(aq for descriptions of global parameters.
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
  create\-compilation\-job
\-\-compilation\-job\-name <value>
\-\-role\-arn <value>
\-\-input\-config <value>
\-\-output\-config <value>
\-\-stopping\-condition <value>
[\-\-tags <value>]
[\-\-cli\-input\-json | \-\-cli\-input\-yaml]
[\-\-generate\-cli\-skeleton <value>]
.ft P
.fi
.UNINDENT
.UNINDENT
.SH OPTIONS
.sp
\fB\-\-compilation\-job\-name\fP (string)
.INDENT 0.0
.INDENT 3.5
A name for the model compilation job. The name must be unique within the AWS Region and within your AWS account.
.UNINDENT
.UNINDENT
.sp
\fB\-\-role\-arn\fP (string)
.INDENT 0.0
.INDENT 3.5
The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.
.sp
During model compilation, Amazon SageMaker needs your permission to:
.INDENT 0.0
.IP \(bu 2
Read input data from an S3 bucket
.IP \(bu 2
Write model artifacts to an S3 bucket
.IP \(bu 2
Write logs to Amazon CloudWatch Logs
.IP \(bu 2
Publish metrics to Amazon CloudWatch
.UNINDENT
.sp
You grant permissions for all of these tasks to an IAM role. To pass this role to Amazon SageMaker, the caller of this API must have the \fBiam:PassRole\fP permission. For more information, see \fI\%Amazon SageMaker Roles.\fP
.UNINDENT
.UNINDENT
.sp
\fB\-\-input\-config\fP (structure)
.INDENT 0.0
.INDENT 3.5
Provides information about the location of input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained.
.sp
S3Uri \-> (string)
.INDENT 0.0
.INDENT 3.5
The S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
.UNINDENT
.UNINDENT
.sp
DataInputConfig \-> (string)
.INDENT 0.0
.INDENT 3.5
Specifies the name and shape of the expected data inputs for your trained model with a JSON dictionary form. The data inputs are  InputConfig$Framework specific.
.INDENT 0.0
.IP \(bu 2
\fBTensorFlow\fP : You must specify the name and shape (NHWC format) of the expected data inputs using a dictionary format for your trained model. The dictionary formats required for the console and CLI are different.
.INDENT 2.0
.IP \(bu 2
Examples for one input:
.INDENT 2.0
.IP \(bu 2
If using the console, \fB{"input":[1,1024,1024,3]}\fP
.IP \(bu 2
If using the CLI, \fB{\e"input\e":[1,1024,1024,3]}\fP
.UNINDENT
.IP \(bu 2
Examples for two inputs:
.INDENT 2.0
.IP \(bu 2
If using the console, \fB{"data1": [1,28,28,1], "data2":[1,28,28,1]}\fP
.IP \(bu 2
If using the CLI, \fB{\e"data1\e": [1,28,28,1], \e"data2\e":[1,28,28,1]}\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBKERAS\fP : You must specify the name and shape (NCHW format) of expected data inputs using a dictionary format for your trained model. Note that while Keras model artifacts should be uploaded in NHWC (channel\-last) format, \fBDataInputConfig\fP should be specified in NCHW (channel\-first) format. The dictionary formats required for the console and CLI are different.
.INDENT 2.0
.IP \(bu 2
Examples for one input:
.INDENT 2.0
.IP \(bu 2
If using the console, \fB{"input_1":[1,3,224,224]}\fP
.IP \(bu 2
If using the CLI, \fB{\e"input_1\e":[1,3,224,224]}\fP
.UNINDENT
.IP \(bu 2
Examples for two inputs:
.INDENT 2.0
.IP \(bu 2
If using the console, \fB{"input_1": [1,3,224,224], "input_2":[1,3,224,224]}\fP
.IP \(bu 2
If using the CLI, \fB{\e"input_1\e": [1,3,224,224], \e"input_2\e":[1,3,224,224]}\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBMXNET/ONNX/DARKNET\fP : You must specify the name and shape (NCHW format) of the expected data inputs in order using a dictionary format for your trained model. The dictionary formats required for the console and CLI are different.
.INDENT 2.0
.IP \(bu 2
Examples for one input:
.INDENT 2.0
.IP \(bu 2
If using the console, \fB{"data":[1,3,1024,1024]}\fP
.IP \(bu 2
If using the CLI, \fB{\e"data\e":[1,3,1024,1024]}\fP
.UNINDENT
.IP \(bu 2
Examples for two inputs:
.INDENT 2.0
.IP \(bu 2
If using the console, \fB{"var1": [1,1,28,28], "var2":[1,1,28,28]}\fP
.IP \(bu 2
If using the CLI, \fB{\e"var1\e": [1,1,28,28], \e"var2\e":[1,1,28,28]}\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBPyTorch\fP : You can either specify the name and shape (NCHW format) of expected data inputs in order using a dictionary format for your trained model or you can specify the shape only using a list format. The dictionary formats required for the console and CLI are different. The list formats for the console and CLI are the same.
.INDENT 2.0
.IP \(bu 2
Examples for one input in dictionary format:
.INDENT 2.0
.IP \(bu 2
If using the console, \fB{"input0":[1,3,224,224]}\fP
.IP \(bu 2
If using the CLI, \fB{\e"input0\e":[1,3,224,224]}\fP
.UNINDENT
.IP \(bu 2
Example for one input in list format: \fB[[1,3,224,224]]\fP
.IP \(bu 2
Examples for two inputs in dictionary format:
.INDENT 2.0
.IP \(bu 2
If using the console, \fB{"input0":[1,3,224,224], "input1":[1,3,224,224]}\fP
.IP \(bu 2
If using the CLI, \fB{\e"input0\e":[1,3,224,224], \e"input1\e":[1,3,224,224]}\fP
.UNINDENT
.IP \(bu 2
Example for two inputs in list format: \fB[[1,3,224,224], [1,3,224,224]]\fP
.UNINDENT
.IP \(bu 2
\fBXGBOOST\fP : input data name and shape are not needed.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
\fBDataInputConfig\fP supports the following parameters for \fBCoreML\fP   OutputConfig$TargetDevice (ML Model format):
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fBshape\fP : Input shape, for example \fB{"input_1": {"shape": [1,224,224,3]}}\fP . In addition to static input shapes, CoreML converter supports Flexible input shapes:
.INDENT 2.0
.IP \(bu 2
Range Dimension. You can use the Range Dimension feature if you know the input shape will be within some specific interval in that dimension, for example: \fB{"input_1": {"shape": ["1..10", 224, 224, 3]}}\fP
.IP \(bu 2
Enumerated shapes. Sometimes, the models are trained to work only on a select set of inputs. You can enumerate all supported input shapes, for example: \fB{"input_1": {"shape": [[1, 224, 224, 3], [1, 160, 160, 3]]}}\fP
.UNINDENT
.IP \(bu 2
\fBdefault_shape\fP : Default input shape. You can set a default shape during conversion for both Range Dimension and Enumerated Shapes. For example \fB{"input_1": {"shape": ["1..10", 224, 224, 3], "default_shape": [1, 224, 224, 3]}}\fP
.IP \(bu 2
\fBtype\fP : Input type. Allowed values: \fBImage\fP and \fBTensor\fP . By default, the converter generates an ML Model with inputs of type Tensor (MultiArray). User can set input type to be Image. Image input type requires additional input parameters such as \fBbias\fP and \fBscale\fP .
.IP \(bu 2
\fBbias\fP : If the input type is an Image, you need to provide the bias vector.
.IP \(bu 2
\fBscale\fP : If the input type is an Image, you need to provide a scale factor.
.UNINDENT
.sp
CoreML \fBClassifierConfig\fP parameters can be specified using  OutputConfig$CompilerOptions . CoreML converter supports Tensorflow and PyTorch models. CoreML conversion examples:
.INDENT 0.0
.IP \(bu 2
Tensor type input:
.INDENT 2.0
.IP \(bu 2
\fB"DataInputConfig": {"input_1": {"shape": [[1,224,224,3], [1,160,160,3]], "default_shape": [1,224,224,3]}}\fP
.UNINDENT
.IP \(bu 2
Tensor type input without input name (PyTorch):
.INDENT 2.0
.IP \(bu 2
\fB"DataInputConfig": [{"shape": [[1,3,224,224], [1,3,160,160]], "default_shape": [1,3,224,224]}]\fP
.UNINDENT
.IP \(bu 2
Image type input:
.INDENT 2.0
.IP \(bu 2
\fB"DataInputConfig": {"input_1": {"shape": [[1,224,224,3], [1,160,160,3]], "default_shape": [1,224,224,3], "type": "Image", "bias": [\-1,\-1,\-1], "scale": 0.007843137255}}\fP
.IP \(bu 2
\fB"CompilerOptions": {"class_labels": "imagenet_labels_1000.txt"}\fP
.UNINDENT
.IP \(bu 2
Image type input without input name (PyTorch):
.INDENT 2.0
.IP \(bu 2
\fB"DataInputConfig": [{"shape": [[1,3,224,224], [1,3,160,160]], "default_shape": [1,3,224,224], "type": "Image", "bias": [\-1,\-1,\-1], "scale": 0.007843137255}]\fP
.IP \(bu 2
\fB"CompilerOptions": {"class_labels": "imagenet_labels_1000.txt"}\fP
.UNINDENT
.UNINDENT
.sp
Depending on the model format, \fBDataInputConfig\fP requires the following parameters for \fBml_eia2\fP  \fI\%OutputConfig:TargetDevice\fP .
.INDENT 0.0
.IP \(bu 2
For TensorFlow models saved in the SavedModel format, specify the input names from \fBsignature_def_key\fP and the input model shapes for \fBDataInputConfig\fP . Specify the \fBsignature_def_key\fP in \(ga \fBOutputConfig:CompilerOptions\fP \fI\%https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker\-Type\-OutputConfig\fP\-CompilerOptions\(ga__ if the model does not use TensorFlow\(aqs default signature def key. For example:
.INDENT 2.0
.IP \(bu 2
\fB"DataInputConfig": {"inputs": [1, 224, 224, 3]}\fP
.IP \(bu 2
\fB"CompilerOptions": {"signature_def_key": "serving_custom"}\fP
.UNINDENT
.IP \(bu 2
For TensorFlow models saved as a frozen graph, specify the input tensor names and shapes in \fBDataInputConfig\fP and the output tensor names for \fBoutput_names\fP in \(ga \fBOutputConfig:CompilerOptions\fP \fI\%https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker\-Type\-OutputConfig\fP\-CompilerOptions\(ga__ . For example:
.INDENT 2.0
.IP \(bu 2
\fB"DataInputConfig": {"input_tensor:0": [1, 224, 224, 3]}\fP
.IP \(bu 2
\fB"CompilerOptions": {"output_names": ["output_tensor:0"]}\fP
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Framework \-> (string)
.INDENT 0.0
.INDENT 3.5
Identifies the framework in which the model was trained. For example: TENSORFLOW.
.UNINDENT
.UNINDENT
.sp
FrameworkVersion \-> (string)
.INDENT 0.0
.INDENT 3.5
Specifies the framework version to use.
.sp
This API field is only supported for PyTorch framework versions \fB1.4\fP , \fB1.5\fP , and \fB1.6\fP for cloud instance target devices: \fBml_c4\fP , \fBml_c5\fP , \fBml_m4\fP , \fBml_m5\fP , \fBml_p2\fP , \fBml_p3\fP , and \fBml_g4dn\fP .
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Shorthand Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
S3Uri=string,DataInputConfig=string,Framework=string,FrameworkVersion=string
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "S3Uri": "string",
  "DataInputConfig": "string",
  "Framework": "TENSORFLOW"|"KERAS"|"MXNET"|"ONNX"|"PYTORCH"|"XGBOOST"|"TFLITE"|"DARKNET"|"SKLEARN",
  "FrameworkVersion": "string"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-output\-config\fP (structure)
.INDENT 0.0
.INDENT 3.5
Provides information about the output location for the compiled model and the target device the model runs on.
.sp
S3OutputLocation \-> (string)
.INDENT 0.0
.INDENT 3.5
Identifies the S3 bucket where you want Amazon SageMaker to store the model artifacts. For example, \fBs3://bucket\-name/key\-name\-prefix\fP .
.UNINDENT
.UNINDENT
.sp
TargetDevice \-> (string)
.INDENT 0.0
.INDENT 3.5
Identifies the target device or the machine learning instance that you want to run your model on after the compilation has completed. Alternatively, you can specify OS, architecture, and accelerator using  TargetPlatform fields. It can be used instead of \fBTargetPlatform\fP .
.UNINDENT
.UNINDENT
.sp
TargetPlatform \-> (structure)
.INDENT 0.0
.INDENT 3.5
Contains information about a target platform that you want your model to run on, such as OS, architecture, and accelerators. It is an alternative of \fBTargetDevice\fP .
.sp
The following examples show how to configure the \fBTargetPlatform\fP and \fBCompilerOptions\fP JSON strings for popular target platforms:
.INDENT 0.0
.IP \(bu 2
Raspberry Pi 3 Model B+  \fB"TargetPlatform": {"Os": "LINUX", "Arch": "ARM_EABIHF"},\fP    \fB"CompilerOptions": {\(aqmattr\(aq: [\(aq+neon\(aq]}\fP
.IP \(bu 2
Jetson TX2  \fB"TargetPlatform": {"Os": "LINUX", "Arch": "ARM64", "Accelerator": "NVIDIA"},\fP    \fB"CompilerOptions": {\(aqgpu\-code\(aq: \(aqsm_62\(aq, \(aqtrt\-ver\(aq: \(aq6.0.1\(aq, \(aqcuda\-ver\(aq: \(aq10.0\(aq}\fP
.IP \(bu 2
EC2 m5.2xlarge instance OS  \fB"TargetPlatform": {"Os": "LINUX", "Arch": "X86_64", "Accelerator": "NVIDIA"},\fP    \fB"CompilerOptions": {\(aqmcpu\(aq: \(aqskylake\-avx512\(aq}\fP
.IP \(bu 2
RK3399  \fB"TargetPlatform": {"Os": "LINUX", "Arch": "ARM64", "Accelerator": "MALI"}\fP
.IP \(bu 2
ARMv7 phone (CPU)  \fB"TargetPlatform": {"Os": "ANDROID", "Arch": "ARM_EABI"},\fP    \fB"CompilerOptions": {\(aqANDROID_PLATFORM\(aq: 25, \(aqmattr\(aq: [\(aq+neon\(aq]}\fP
.IP \(bu 2
ARMv8 phone (CPU)  \fB"TargetPlatform": {"Os": "ANDROID", "Arch": "ARM64"},\fP    \fB"CompilerOptions": {\(aqANDROID_PLATFORM\(aq: 29}\fP
.UNINDENT
.sp
Os \-> (string)
.INDENT 0.0
.INDENT 3.5
Specifies a target platform OS.
.INDENT 0.0
.IP \(bu 2
\fBLINUX\fP : Linux\-based operating systems.
.IP \(bu 2
\fBANDROID\fP : Android operating systems. Android API level can be specified using the \fBANDROID_PLATFORM\fP compiler option. For example, \fB"CompilerOptions": {\(aqANDROID_PLATFORM\(aq: 28}\fP
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Arch \-> (string)
.INDENT 0.0
.INDENT 3.5
Specifies a target platform architecture.
.INDENT 0.0
.IP \(bu 2
\fBX86_64\fP : 64\-bit version of the x86 instruction set.
.IP \(bu 2
\fBX86\fP : 32\-bit version of the x86 instruction set.
.IP \(bu 2
\fBARM64\fP : ARMv8 64\-bit CPU.
.IP \(bu 2
\fBARM_EABIHF\fP : ARMv7 32\-bit, Hard Float.
.IP \(bu 2
\fBARM_EABI\fP : ARMv7 32\-bit, Soft Float. Used by Android 32\-bit ARM platform.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Accelerator \-> (string)
.INDENT 0.0
.INDENT 3.5
Specifies a target platform accelerator (optional).
.INDENT 0.0
.IP \(bu 2
\fBNVIDIA\fP : Nvidia graphics processing unit. It also requires \fBgpu\-code\fP , \fBtrt\-ver\fP , \fBcuda\-ver\fP compiler options
.IP \(bu 2
\fBMALI\fP : ARM Mali graphics processor
.IP \(bu 2
\fBINTEL_GRAPHICS\fP : Integrated Intel graphics
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
CompilerOptions \-> (string)
.INDENT 0.0
.INDENT 3.5
Specifies additional parameters for compiler options in JSON format. The compiler options are \fBTargetPlatform\fP specific. It is required for NVIDIA accelerators and highly recommended for CPU compilations. For any other cases, it is optional to specify \fBCompilerOptions.\fP
.INDENT 0.0
.IP \(bu 2
\fBDTYPE\fP : Specifies the data type for the input. When compiling for \fBml_*\fP (except for \fBml_inf\fP ) instances using PyTorch framework, provide the data type (dtype) of the model\(aqs input. \fB"float32"\fP is used if \fB"DTYPE"\fP is not specified. Options for data type are:
.INDENT 2.0
.IP \(bu 2
float32: Use either \fB"float"\fP or \fB"float32"\fP .
.IP \(bu 2
int64: Use either \fB"int64"\fP or \fB"long"\fP .
.UNINDENT
.UNINDENT
.sp
For example, \fB{"dtype" : "float32"}\fP .
.INDENT 0.0
.IP \(bu 2
\fBCPU\fP : Compilation for CPU supports the following compiler options.
.INDENT 2.0
.IP \(bu 2
\fBmcpu\fP : CPU micro\-architecture. For example, \fB{\(aqmcpu\(aq: \(aqskylake\-avx512\(aq}\fP
.IP \(bu 2
\fBmattr\fP : CPU flags. For example, \fB{\(aqmattr\(aq: [\(aq+neon\(aq, \(aq+vfpv4\(aq]}\fP
.UNINDENT
.IP \(bu 2
\fBARM\fP : Details of ARM CPU compilations.
.INDENT 2.0
.IP \(bu 2
\fBNEON\fP : NEON is an implementation of the Advanced SIMD extension used in ARMv7 processors. For example, add \fB{\(aqmattr\(aq: [\(aq+neon\(aq]}\fP to the compiler options if compiling for ARM 32\-bit platform with the NEON support.
.UNINDENT
.IP \(bu 2
\fBNVIDIA\fP : Compilation for NVIDIA GPU supports the following compiler options.
.INDENT 2.0
.IP \(bu 2
\fBgpu_code\fP : Specifies the targeted architecture.
.IP \(bu 2
\fBtrt\-ver\fP : Specifies the TensorRT versions in x.y.z. format.
.IP \(bu 2
\fBcuda\-ver\fP : Specifies the CUDA version in x.y format.
.UNINDENT
.UNINDENT
.sp
For example, \fB{\(aqgpu\-code\(aq: \(aqsm_72\(aq, \(aqtrt\-ver\(aq: \(aq6.0.1\(aq, \(aqcuda\-ver\(aq: \(aq10.1\(aq}\fP
.INDENT 0.0
.IP \(bu 2
\fBANDROID\fP : Compilation for the Android OS supports the following compiler options:
.INDENT 2.0
.IP \(bu 2
\fBANDROID_PLATFORM\fP : Specifies the Android API levels. Available levels range from 21 to 29. For example, \fB{\(aqANDROID_PLATFORM\(aq: 28}\fP .
.IP \(bu 2
\fBmattr\fP : Add \fB{\(aqmattr\(aq: [\(aq+neon\(aq]}\fP to compiler options if compiling for ARM 32\-bit platform with NEON support.
.UNINDENT
.IP \(bu 2
\fBINFERENTIA\fP : Compilation for target ml_inf1 uses compiler options passed in as a JSON string. For example, \fB"CompilerOptions": "\e"\-\-verbose 1 \-\-num\-neuroncores 2 \-O2\e""\fP .  For information about supported compiler options, see \fI\%Neuron Compiler CLI\fP .
.IP \(bu 2
\fBCoreML\fP : Compilation for the CoreML  OutputConfig$TargetDevice supports the following compiler options:
.INDENT 2.0
.IP \(bu 2
\fBclass_labels\fP : Specifies the classification labels file name inside input tar.gz file. For example, \fB{"class_labels": "imagenet_labels_1000.txt"}\fP . Labels inside the txt file should be separated by newlines.
.UNINDENT
.IP \(bu 2
\fBEIA\fP : Compilation for the Elastic Inference Accelerator supports the following compiler options:
.INDENT 2.0
.IP \(bu 2
\fBprecision_mode\fP : Specifies the precision of compiled artifacts. Supported values are \fB"FP16"\fP and \fB"FP32"\fP . Default is \fB"FP32"\fP .
.IP \(bu 2
\fBsignature_def_key\fP : Specifies the signature to use for models in SavedModel format. Defaults is TensorFlow\(aqs default signature def key.
.IP \(bu 2
\fBoutput_names\fP : Specifies a list of output tensor names for models in FrozenGraph format. Set at most one API field, either: \fBsignature_def_key\fP or \fBoutput_names\fP .
.UNINDENT
.UNINDENT
.sp
For example: \fB{"precision_mode": "FP32", "output_names": ["output:0"]}\fP
.UNINDENT
.UNINDENT
.sp
KmsKeyId \-> (string)
.INDENT 0.0
.INDENT 3.5
The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume after compilation job. If you don\(aqt provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role\(aqs account
.sp
The KmsKeyId can be any of the following formats:
.INDENT 0.0
.IP \(bu 2
Key ID: \fB1234abcd\-12ab\-34cd\-56ef\-1234567890ab\fP
.IP \(bu 2
Key ARN: \fBarn:aws:kms:us\-west\-2:111122223333:key/1234abcd\-12ab\-34cd\-56ef\-1234567890ab\fP
.IP \(bu 2
Alias name: \fBalias/ExampleAlias\fP
.IP \(bu 2
Alias name ARN: \fBarn:aws:kms:us\-west\-2:111122223333:alias/ExampleAlias\fP
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Shorthand Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
S3OutputLocation=string,TargetDevice=string,TargetPlatform={Os=string,Arch=string,Accelerator=string},CompilerOptions=string,KmsKeyId=string
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "S3OutputLocation": "string",
  "TargetDevice": "lambda"|"ml_m4"|"ml_m5"|"ml_c4"|"ml_c5"|"ml_p2"|"ml_p3"|"ml_g4dn"|"ml_inf1"|"ml_eia2"|"jetson_tx1"|"jetson_tx2"|"jetson_nano"|"jetson_xavier"|"rasp3b"|"imx8qm"|"deeplens"|"rk3399"|"rk3288"|"aisage"|"sbe_c"|"qcs605"|"qcs603"|"sitara_am57x"|"amba_cv22"|"x86_win32"|"x86_win64"|"coreml"|"jacinto_tda4vm",
  "TargetPlatform": {
    "Os": "ANDROID"|"LINUX",
    "Arch": "X86_64"|"X86"|"ARM64"|"ARM_EABI"|"ARM_EABIHF",
    "Accelerator": "INTEL_GRAPHICS"|"MALI"|"NVIDIA"
  },
  "CompilerOptions": "string",
  "KmsKeyId": "string"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-stopping\-condition\fP (structure)
.INDENT 0.0
.INDENT 3.5
Specifies a limit to how long a model compilation job can run. When the job reaches the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training costs.
.sp
MaxRuntimeInSeconds \-> (integer)
.INDENT 0.0
.INDENT 3.5
The maximum length of time, in seconds, that a training or compilation job can run. If the job does not complete during this time, Amazon SageMaker ends the job.
.sp
When \fBRetryStrategy\fP is specified in the job request, \fBMaxRuntimeInSeconds\fP specifies the maximum time for all of the attempts in total, not each individual attempt.
.sp
The default value is 1 day. The maximum value is 28 days.
.UNINDENT
.UNINDENT
.sp
MaxWaitTimeInSeconds \-> (integer)
.INDENT 0.0
.INDENT 3.5
The maximum length of time, in seconds, that a managed Spot training job has to complete. It is the amount of time spent waiting for Spot capacity plus the amount of time the job can run. It must be equal to or greater than \fBMaxRuntimeInSeconds\fP . If the job does not complete during this time, Amazon SageMaker ends the job.
.sp
When \fBRetryStrategy\fP is specified in the job request, \fBMaxWaitTimeInSeconds\fP specifies the maximum time for all of the attempts in total, not each individual attempt.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Shorthand Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MaxRuntimeInSeconds=integer,MaxWaitTimeInSeconds=integer
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "MaxRuntimeInSeconds": integer,
  "MaxWaitTimeInSeconds": integer
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-tags\fP (list)
.INDENT 0.0
.INDENT 3.5
An array of key\-value pairs. You can use tags to categorize your AWS resources in different ways, for example, by purpose, owner, or environment. For more information, see \fI\%Tagging AWS Resources\fP .
.sp
(structure)
.INDENT 0.0
.INDENT 3.5
Describes a tag.
.sp
Key \-> (string)
.INDENT 0.0
.INDENT 3.5
The tag key.
.UNINDENT
.UNINDENT
.sp
Value \-> (string)
.INDENT 0.0
.INDENT 3.5
The tag value.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Shorthand Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Key=string,Value=string ...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON Syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
  {
    "Key": "string",
    "Value": "string"
  }
  ...
]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-cli\-input\-json\fP | \fB\-\-cli\-input\-yaml\fP (string)
Reads arguments from the JSON string provided. The JSON string follows the format provided by \fB\-\-generate\-cli\-skeleton\fP\&. If other arguments are provided on the command line, those values will override the JSON\-provided values. It is not possible to pass arbitrary binary values using a JSON\-provided value as the string will be taken literally. This may not be specified along with \fB\-\-cli\-input\-yaml\fP\&.
.sp
\fB\-\-generate\-cli\-skeleton\fP (string)
Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value \fBinput\fP, prints a sample input JSON that can be used as an argument for \fB\-\-cli\-input\-json\fP\&. Similarly, if provided \fByaml\-input\fP it will print a sample input YAML that can be used with \fB\-\-cli\-input\-yaml\fP\&. If provided with the value \fBoutput\fP, it validates the command inputs and returns a sample output JSON for that command.
.sp
See \(aqaws help\(aq for descriptions of global parameters.
.SH OUTPUT
.sp
CompilationJobArn \-> (string)
.INDENT 0.0
.INDENT 3.5
If the action is successful, the service sends back an HTTP 200 response. Amazon SageMaker returns the following data in JSON format:
.INDENT 0.0
.IP \(bu 2
\fBCompilationJobArn\fP : The Amazon Resource Name (ARN) of the compiled job.
.UNINDENT
.UNINDENT
.UNINDENT
.\" Generated by docutils manpage writer.
.
